{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./components/Device/Device.js","webpack:///./components/Speaker/Speaker.js","webpack:///./components/Kettle/Kettle.js","webpack:///./components/Speaker/SpeakerView.js","webpack:///./components/Kettle/KettleView.js","webpack:///./index.js","webpack:///./components/Home/Home.js","webpack:///./components/Home/HomeView.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Device","[object Object]","power","this","_name","_power","_isOn","isOn","Speaker_Speaker","super","_minVolume","_maxVolume","_volume","_subwoofer","_bassBoost","volume","Kettle_Kettle","_temperature","_minTemperature","_maxTemperature","temperature","seconds","setTimeout","SpeakerView","speaker","rootElement","_speaker","_rootElement","document","createElement","className","style","backgroundColor","isOnState","switchIsOnState","innerText","isOnStateButtonOn","type","addEventListener","switchOn","speakerImage","src","bassBoostButtonOn","disabled","bassBoostButtonOff","volumeInputRange","volumeInputText","isOnStateButtonOff","switchOff","bassBoostOff","switchBassBoost","switchVolume","display","id","min","max","oninput","bassBoost","bassBoostOn","appendChild","KettleView","kettle","_kettle","kettleImage","temperatureInputText","boilButton","boilTimerInput","boilTimerButton","switchTemperature","boil","placeholder","boilTimer","index_home","location","_location","_devices","Map","devices","device","has","Error","set","deviceName","delete","clear","forEach","homeView","home","_home","deviceList","listItemSpeaker","text","listItemKettle","deviceNameInput","devicePowerInput","addDeviceButtonOn","devicePower","deviceListValue","options","selectedIndex","addDevice","getElementById","render","innerHTML","window"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","//Device\r\nexport default class Device {\r\n    constructor(name, power) {\r\n        this._name = name;\r\n        this._power = power;\r\n        this._isOn = false;\r\n    }\r\n\r\n    get name() {\r\n        return this._name;\r\n    }\r\n    get power() {\r\n        return this._power;\r\n    }\r\n    get isOn() {\r\n        return this._isOn;\r\n    }\r\n\r\n\r\n    switchOn() {\r\n        this._isOn = true;\r\n    }\r\n\r\n    switchOff() {\r\n        this._isOn = false;\r\n    }\r\n}","import Device from \"../Device/Device\";\r\n\r\nexport default class Speaker extends Device{\r\n    constructor (name, power) {\r\n        super(name, power);\r\n        this._minVolume = 1;\r\n        this._maxVolume = 100;\r\n        this._volume = this._maxVolume / 2;\r\n        this._subwoofer = false;\r\n        this._bassBoost = false;\r\n\r\n\r\n    }\r\n\r\n    get volume() {\r\n        return this._volume;\r\n    }\r\n\r\n    set volume(volume) {\r\n        if(volume >= this._maxVolume) {\r\n            this._volume = this._maxVolume\r\n        } else if(volume <= this._minVolume) {\r\n            this._volume = this._minVolume\r\n        } else {\r\n            this._volume = volume;\r\n        }\r\n    }\r\n\r\n    increaseVolume() {\r\n        if(this._volume < this._maxVolume) {\r\n            this._volume ++;\r\n        }\r\n    }\r\n    decreaseVolume() {\r\n        if(this._volume > this._minVolume) {\r\n            this._volume --;\r\n        }\r\n    }\r\n\r\n    bassBoostOn() {\r\n        this._bassBoost = true;\r\n        this._subwoofer = true;\r\n    }\r\n\r\n    bassBoostOff() {\r\n        this._bassBoost = false;\r\n        this._subwoofer = false;\r\n    }\r\n\r\n}","import Device from \"../Device/Device\";\r\n\r\n//Kettle\r\nexport default class Kettle extends Device{\r\n    constructor (name, power) {\r\n        super(name, power);\r\n        this._temperature = 1;\r\n        this._minTemperature = 1;\r\n        this._maxTemperature = 100;\r\n    }\r\n\r\n    get temperature() {\r\n        return this._temperature;\r\n    }\r\n\r\n    set temperature(temperature) {\r\n        if(temperature >= this._maxTemperature) {\r\n            this._temperature = this._maxTemperature;\r\n        } else if(temperature <= this._minTemperature) {\r\n            this._temperature = this._minTemperature;\r\n        } else {\r\n            this._temperature = temperature;\r\n        }\r\n    }\r\n\r\n    boil() {\r\n        this._temperature = this._maxTemperature;\r\n    }\r\n\r\n\r\n\r\n    boilTimer(seconds) {\r\n        let boil = () => {\r\n            this._temperature = this._maxTemperature;\r\n        };\r\n        setTimeout(boil, seconds * 1000)\r\n    }\r\n}","\r\nexport default class SpeakerView{\r\n    constructor(speaker, rootElement) {\r\n        this._speaker = speaker;\r\n        this._rootElement = rootElement;\r\n    }\r\n\r\n    render() {\r\n        // Main container\r\n        let speaker = document.createElement('div');\r\n        speaker.className = 'speaker';\r\n        speaker.style.backgroundColor = '#ebebe4';\r\n\r\n        // On / Off State\r\n        let isOnState = document.createElement('div');\r\n        isOnState.className = 'speaker__state';\r\n        let switchIsOnState = () => {\r\n            isOnState.innerText = `State: ${this._speaker.isOn ? 'On' : 'Off'}`\r\n        };\r\n        // On Button\r\n        let isOnStateButtonOn = document.createElement(\"button\");\r\n        isOnStateButtonOn.className = 'speaker__state-button button button_on';\r\n        isOnStateButtonOn.type = 'button';\r\n        isOnStateButtonOn.innerText = 'On';\r\n        isOnStateButtonOn.addEventListener('click', () => {\r\n           this._speaker.switchOn();\r\n           switchIsOnState();\r\n           speakerImage.src = './img/Speaker/Speaker-on.png';\r\n           bassBoostButtonOn.disabled = false;\r\n           bassBoostButtonOff.disabled = false;\r\n           volumeInputRange.disabled = false;\r\n           volumeInputText.disabled = false;\r\n            speaker.style.backgroundColor = '#bcebeb';\r\n        });\r\n        // Off Button\r\n        let isOnStateButtonOff = document.createElement(\"button\");\r\n        isOnStateButtonOff.className = 'speaker__state-button button button_off';\r\n        isOnStateButtonOff.type = 'button';\r\n        isOnStateButtonOff.innerText = 'Off';\r\n        isOnStateButtonOff.addEventListener('click', () => {\r\n            this._speaker.switchOff();\r\n            this._speaker.bassBoostOff();\r\n            this._speaker._volume = this._speaker._maxVolume / 2;\r\n            volumeInputRange.value = this._speaker._volume;\r\n            volumeInputText.value = this._speaker._volume;\r\n            switchIsOnState();\r\n            switchBassBoost();\r\n            switchVolume();\r\n            speakerImage.src = './img/Speaker/Speaker-off.png';\r\n            bassBoostButtonOn.disabled = true;\r\n            bassBoostButtonOff.disabled = true;\r\n            volumeInputRange.disabled = true;\r\n            volumeInputText.disabled = true;\r\n            speaker.style.backgroundColor = '#ebebe4';\r\n        });\r\n\r\n        // Name\r\n        let name = document.createElement('div');\r\n        name.className = 'speaker__name';\r\n        name.innerText = `Device name: ${this._speaker.name}`;\r\n\r\n        // Power\r\n        let power = document.createElement('div');\r\n        power.className = 'speaker__power';\r\n        power.innerText = `Device power: ${this._speaker.power}`;\r\n\r\n        // Current Volume\r\n        let volume = document.createElement('div');\r\n        volume.className = 'speaker__volume';\r\n        let switchVolume = () => {\r\n            volume.innerText = `Device volume: ${this._speaker._volume}`;\r\n        };\r\n\r\n        // Set Volume\r\n        // By Range:\r\n        let volumeInputRange = document.createElement('input');\r\n        volumeInputRange.style.display = 'block';\r\n        volumeInputRange.className = 'speaker__volume-range';\r\n        volumeInputRange.id = 'speaker__volume-range';\r\n        volumeInputRange.type = 'range';\r\n        volumeInputRange.value = this._speaker._volume;\r\n        volumeInputRange.min = this._speaker._minVolume;\r\n        volumeInputRange.max = this._speaker._maxVolume;\r\n        volumeInputRange.disabled = true;\r\n        volumeInputRange.oninput = () => {\r\n            volume.innerText = `Volume: ${volumeInputRange.value}`;\r\n            this._speaker.volume = volumeInputRange.value;\r\n            volumeInputText.value = volumeInputRange.value;\r\n        };\r\n        // By Input\r\n        let volumeInputText = document.createElement('input');\r\n        volumeInputText.className = 'speaker__volume-text';\r\n        volumeInputText.style.display = 'block';\r\n        volumeInputText.type = 'number';\r\n        volumeInputText.min = this._speaker._minVolume;\r\n        volumeInputText.max = this._speaker._maxVolume;\r\n        volumeInputText.value = this._speaker._volume;\r\n        volumeInputText.disabled = true;\r\n        volumeInputText.addEventListener('oninput', () => {\r\n            if(volumeInputText.value <= this._speaker._maxVolume && volumeInputText.value >= this._speaker._minVolume) {\r\n                this._speaker.volume(volumeInputText.value);\r\n                volume.innerText = `Volume: ${volumeInputText.value}`;\r\n                volumeInputRange.value = volumeInputText.value;\r\n            } else {\r\n                volumeInputText.value = this._speaker._volume;\r\n            }\r\n        });\r\n\r\n        // Bass Boost\r\n        let bassBoost = document.createElement('div');\r\n        bassBoost.className = 'speaker__bassboost';\r\n        let switchBassBoost = () => {\r\n            bassBoost.innerText = `Bass Boost: ${this._speaker._bassBoost ? 'On' : 'Off'}`\r\n        };\r\n        // Bass Boost Button On\r\n        let bassBoostButtonOn = document.createElement(\"button\");\r\n        bassBoostButtonOn.className = 'speaker__bassboost-button button button_on';\r\n        bassBoostButtonOn.type = 'button';\r\n        bassBoostButtonOn.innerText = 'On';\r\n        bassBoostButtonOn.disabled = true;\r\n        bassBoostButtonOn.addEventListener('click', () => {\r\n            this._speaker.bassBoostOn();\r\n            switchBassBoost();\r\n            speakerImage.src = './img/Speaker/Speaker-bassbost.png';\r\n            });\r\n        // Bass Boost Button Off\r\n        let bassBoostButtonOff = document.createElement(\"button\");\r\n        bassBoostButtonOff.className = 'speaker__bassboost-button button button_off';\r\n        bassBoostButtonOff.type = 'button';\r\n        bassBoostButtonOff.innerText = 'Off';\r\n        bassBoostButtonOff.disabled = true;\r\n        bassBoostButtonOff.addEventListener('click', () => {\r\n            this._speaker.bassBoostOff();\r\n            switchBassBoost();\r\n            speakerImage.src = './img/Speaker/Speaker-on.png';\r\n        });\r\n\r\n        // Image\r\n        let speakerImage = document.createElement('img');\r\n        speakerImage.className = 'speaker__image';\r\n        speakerImage.style.display = 'block';\r\n        speakerImage.src = './img/Speaker/Speaker-off.png';\r\n\r\n\r\n        // Insert to page\r\n        // Functions\r\n        switchIsOnState();\r\n        switchVolume();\r\n        switchBassBoost();\r\n        // Elements\r\n        // On / Off state\r\n        speaker.appendChild(isOnState);\r\n        speaker.appendChild(isOnStateButtonOn);\r\n        speaker.appendChild(isOnStateButtonOff);\r\n        // Name\r\n        speaker.appendChild(name);\r\n        // Power\r\n        speaker.appendChild(power);\r\n        // Volume\r\n        speaker.appendChild(volume);\r\n        speaker.appendChild(volumeInputRange);\r\n        speaker.appendChild(volumeInputText);\r\n        // Bass Boost\r\n        speaker.appendChild(bassBoost);\r\n        speaker.appendChild(bassBoostButtonOn);\r\n        speaker.appendChild(bassBoostButtonOff);\r\n        // Image\r\n        speaker.appendChild(speakerImage);\r\n        // Who's know?\r\n        /*this._rootElement.innerHTML = \"\";*/\r\n        this._rootElement.appendChild(speaker);\r\n    }\r\n\r\n}\r\n\r\n","export default class KettleView {\r\n    constructor(kettle, rootElement) {\r\n        this._kettle = kettle;\r\n        this._rootElement = rootElement;\r\n    }\r\n\r\n    render() {\r\n        // Main Container\r\n        let kettle = document.createElement('div');\r\n        kettle.className = 'kettle';\r\n        kettle.style.backgroundColor = '#ebebe4';\r\n\r\n        // On Off State\r\n        let isOnState = document.createElement('div');\r\n        isOnState.className = 'kettle__state';\r\n        let switchIsOnState = () => {\r\n            isOnState.innerText = `State: ${this._kettle.isOn ? 'On' : 'Off'}`\r\n        };\r\n\r\n        // On Button\r\n        let isOnStateButtonOn = document.createElement(\"button\");\r\n        isOnStateButtonOn.className = 'kettle__state-button button button_on';\r\n        isOnStateButtonOn.type = 'button';\r\n        isOnStateButtonOn.innerText = 'On';\r\n        isOnStateButtonOn.addEventListener('click', () => {\r\n            this._kettle.switchOn();\r\n            switchIsOnState();\r\n            kettleImage.src = './img/Kettle/Kettle-on.png';\r\n            temperatureInputText.disabled = false;\r\n            boilButton.disabled = false;\r\n            boilTimerInput.disabled = false;\r\n            boilTimerButton.disabled = false;\r\n            kettle.style.backgroundColor = '#bcebeb'\r\n        });\r\n\r\n        // Off Button\r\n        let isOnStateButtonOff = document.createElement(\"button\");\r\n        isOnStateButtonOff.className = 'kettle__state-button button button_off';\r\n        isOnStateButtonOff.type = 'button';\r\n        isOnStateButtonOff.innerText = 'Off';\r\n        isOnStateButtonOff.addEventListener('click', () => {\r\n            this._kettle.switchOff();\r\n            this._kettle.temperature = this._kettle._minTemperature;\r\n            kettleImage.src = './img/Kettle/Kettle-off.png';\r\n            switchIsOnState();\r\n            switchTemperature();\r\n            temperatureInputText.value = this._kettle._temperature;\r\n            boilTimerInput.value = '';\r\n            temperatureInputText.disabled = true;\r\n            boilButton.disabled = true;\r\n            boilTimerInput.disabled = true;\r\n            boilTimerButton.disabled = true;\r\n            kettle.style.backgroundColor = '#ebebe4';\r\n        });\r\n\r\n        // Name\r\n        let name = document.createElement('div');\r\n        name.className = 'kettle__name';\r\n        name.innerText = `Device name: ${this._kettle.name}`;\r\n\r\n        // Power\r\n        let power = document.createElement('div');\r\n        power.className = 'kettle__power';\r\n        power.innerText = `Device power: ${this._kettle.power}`;\r\n\r\n        // Current Temperature\r\n        let temperature = document.createElement('div');\r\n        temperature.className = 'kettle__temperature';\r\n        let switchTemperature = () => {\r\n            temperature.innerText = `Device temperature: ${this._kettle.temperature}`;\r\n        };\r\n\r\n        // Set Temperature\r\n        let temperatureInputText = document.createElement('input');\r\n        temperatureInputText.className = 'kettle__temperature-text';\r\n        temperatureInputText.style.display = 'block';\r\n        temperatureInputText.type = 'number';\r\n        temperatureInputText.min = this._kettle._minTemperature;\r\n        temperatureInputText.max = this._kettle._maxTemperature;\r\n        temperatureInputText.value = this._kettle._temperature;\r\n        temperatureInputText.disabled = true;\r\n        temperatureInputText.oninput = () => {\r\n           if(temperatureInputText.value <= this._kettle._maxTemperature && temperatureInputText.value >= this._kettle._minTemperature) {\r\n               this._kettle.temperature = temperatureInputText.value;\r\n               switchTemperature();\r\n               if(this._kettle._temperature === this._kettle._maxTemperature) {\r\n                   kettleImage.src = './img/Kettle/Kettle-boiled.png'\r\n               }\r\n               switchTemperature();\r\n           } else {\r\n               temperatureInputText.value = this._kettle._temperature;\r\n           }\r\n        };\r\n\r\n        // Boil\r\n        // Boil Button\r\n        let boilButton = document.createElement('button');\r\n        boilButton.className = 'kettle__boil-button button button_on';\r\n        boilButton.type = 'button';\r\n        boilButton.innerText = 'Boil';\r\n        boilButton.disabled = true;\r\n        boilButton.addEventListener('click', () => {\r\n           this._kettle.boil();\r\n           temperatureInputText.value = this._kettle.temperature;\r\n           switchTemperature();\r\n           kettleImage.src = './img/Kettle/Kettle-boiled.png'\r\n        });\r\n\r\n        // Boil Input\r\n        let boilTimerInput = document.createElement('input');\r\n        boilTimerInput.className = 'kettle__boil-input input';\r\n        boilTimerInput.style.display = 'block';\r\n        boilTimerInput.type = 'number';\r\n        boilTimerInput.placeholder = 'set seconds to boil';\r\n        boilTimerInput.disabled = true;\r\n\r\n        // Boil Timer Button\r\n        let boilTimerButton = document.createElement('button');\r\n        boilTimerButton.className = 'kettle__boil-button button button_on';\r\n        boilTimerButton.type = 'button';\r\n        boilTimerButton.innerText = 'Start boil timer';\r\n        boilTimerButton.disabled = true;\r\n        boilTimerButton.addEventListener('click', () => {\r\n           this._kettle.boilTimer(boilTimerInput.value);\r\n           setTimeout(() => {\r\n               temperatureInputText.value = this._kettle._maxTemperature;\r\n               kettleImage.src = './img/Kettle/Kettle-boiled.png';\r\n               switchTemperature();\r\n               },\r\n               boilTimerInput.value * 1000);\r\n           boilTimerInput.value = '';\r\n        });\r\n\r\n        // Image\r\n        let kettleImage = document.createElement('img');\r\n        kettleImage.className = 'kettle__image';\r\n        kettleImage.style.display = 'block';\r\n        kettleImage.src = './img/Kettle/Kettle-off.png';\r\n\r\n        // Insert To Page\r\n        // Functions\r\n        switchIsOnState();\r\n        switchTemperature();\r\n        // Elements\r\n        // On / Off State\r\n        kettle.appendChild(isOnState);\r\n        kettle.appendChild(isOnStateButtonOn);\r\n        kettle.appendChild(isOnStateButtonOff);\r\n        // Name\r\n        kettle.appendChild(name);\r\n        // Power\r\n        kettle.appendChild(power);\r\n        // Current Temperature\r\n        kettle.appendChild(temperature);\r\n        // Set Temperature\r\n        kettle.appendChild(temperatureInputText);\r\n        // Boil\r\n        kettle.appendChild(boilButton);\r\n        kettle.appendChild(boilTimerInput);\r\n        kettle.appendChild(boilTimerButton);\r\n        // Image\r\n        kettle.appendChild(kettleImage);\r\n        this._rootElement.appendChild(kettle);\r\n    }\r\n}","// Device classes\nimport Home from './components/Home/Home';\nimport Device from './components/Device/Device';\nimport Speaker from './components/Speaker/Speaker';\nimport Bulb from './components/Bulb/Bulb';\nimport Kettle from './components/Kettle/Kettle';\n\n// View\nimport SpeakerView from './components/Speaker/SpeakerView';\nimport KettleView from './components/Kettle/KettleView'\nimport HomeView from './components/Home/HomeView'\n\n// Styles\nimport './index.scss'\n\n\n\nlet home = new Home('WOLFRIEND - Home', 'Kharkiv');\nlet homeView = new HomeView(home, document.getElementById('root'));\n\nwindow.home = home;\nwindow.homeView = homeView;\n\nhomeView.render();\n\n/*\n// Kettle\nlet kettle = new Kettle('myKettle', 100, 1);\nlet kettleView = new KettleView(kettle, document.getElementById('root'));\nkettleView.render();\nwindow.kettle = kettle;\nwindow.kettleView = kettleView;\n*/\n\n\n\n\n\n/*\nwindow.Home = Home;\nwindow.HomeView = HomeView;\nwindow.Device = Device;\nwindow.Speaker = Speaker;\nwindow.SpeakerView = SpeakerView;\nwindow.Bulb = Bulb;\nwindow.Kettle = Kettle;*/\n","import Speaker from '../Speaker/Speaker'\r\n\r\n\r\nexport default class Home {\r\n    constructor(name, location) {\r\n        this._name = name;\r\n        this._location = location;\r\n        this._devices = new Map();\r\n    }\r\n\r\n    get name() {\r\n        return this._name;\r\n    }\r\n    get location() {\r\n        return this._location;\r\n    }\r\n\r\n    getDeviceByName(name) {\r\n        return this._devices.get(name)\r\n    }\r\n\r\n    get devices() {\r\n        return this._devices;\r\n    }\r\n\r\n    addDevice(device) {\r\n        if(this._devices.has(device._name)) {\r\n            throw new Error('Device with same name already exists.')\r\n        } else {\r\n            this._devices.set(device._name, device)\r\n        }\r\n    }\r\n\r\n    deleteDevice(deviceName) {\r\n        this._devices.delete(deviceName);\r\n    }\r\n\r\n    deleteAllDevices() {\r\n        this._devices.clear();\r\n    }\r\n\r\n    switchOffAllDevices() {\r\n        this._devices.forEach( device => device.switchOff());\r\n    }\r\n}","import Speaker from '../Speaker/Speaker'\r\nimport SpeakerView from \"../Speaker/SpeakerView\";\r\nimport Kettle from \"../Kettle/Kettle\";\r\nimport KettleView from \"../Kettle/KettleView\";\r\n\r\nexport default class HomeView {\r\n    constructor(home, rootElement) {\r\n        this._home = home;\r\n        this._rootElement = rootElement;\r\n    }\r\n\r\n    render() {\r\n        // Main container\r\n        let home = document.createElement('div');\r\n        home.className = 'home';\r\n\r\n        // Name\r\n        let name = document.createElement('div');\r\n        name.className = 'home__name';\r\n        name.innerText = `Home: ${this._home.name}`;\r\n\r\n        // Location\r\n        let location = document.createElement('div');\r\n        location.className = 'home__location';\r\n        location.innerText = `Location: ${this._home.location}`;\r\n\r\n        // Device List\r\n        let deviceList = document.createElement('select');\r\n        deviceList.className = 'home__list';\r\n        // List Item Speaker\r\n        let listItemSpeaker = document.createElement('option');\r\n        listItemSpeaker.className = 'home__item';\r\n        listItemSpeaker.text = 'Speaker';\r\n        listItemSpeaker.value = Speaker;\r\n        deviceList.appendChild(listItemSpeaker);\r\n        // List Item Kettle\r\n        let listItemKettle = document.createElement('option');\r\n        listItemKettle.className = 'home__item';\r\n        listItemKettle.text = 'Kettle';\r\n        listItemKettle.value = Kettle;\r\n        deviceList.appendChild(listItemKettle);\r\n        // Device Name Input\r\n        let deviceNameInput = document.createElement('input');\r\n        deviceNameInput.className = 'home__input';\r\n        deviceNameInput.type = 'text';\r\n        deviceNameInput.placeholder = 'enter device name';\r\n        // Device Power Input\r\n        let devicePowerInput = document.createElement('input');\r\n        devicePowerInput.className = 'home__input';\r\n        devicePowerInput.type = 'number';\r\n        devicePowerInput.placeholder = 'enter device power';\r\n        // Device List Buttons\r\n        let addDeviceButtonOn = document.createElement('button');\r\n        addDeviceButtonOn.className = 'home__button button button_on';\r\n        addDeviceButtonOn.type = 'button';\r\n        addDeviceButtonOn.innerText = 'Add device';\r\n        addDeviceButtonOn.addEventListener('click', () => {\r\n            let deviceName = deviceNameInput.value;\r\n            let devicePower = devicePowerInput.value;\r\n           /* this._home.addDevice(new Speaker(deviceNameInput.deviceName, 5));*/\r\n            let deviceListValue = deviceList.options[deviceList.selectedIndex].text;\r\n            if(deviceListValue === 'Speaker') {\r\n                deviceName = new Speaker(deviceName, devicePower);\r\n                this._home.addDevice(deviceName);\r\n                let speakerView = new SpeakerView(deviceName, document.getElementById('root'));\r\n                speakerView.render();\r\n                deviceNameInput.value = '';\r\n                devicePowerInput.value = '';\r\n            } else if (deviceListValue === 'Kettle') {\r\n                deviceName = new Kettle(deviceName, devicePower);\r\n                this._home.addDevice(deviceName);\r\n                let kettleView = new KettleView(deviceName, document.getElementById('root'));\r\n                kettleView.render();\r\n                deviceNameInput.value = '';\r\n                devicePowerInput.value = '';\r\n            }\r\n\r\n\r\n        });\r\n\r\n\r\n\r\n        // Insert to page\r\n\r\n        // Name\r\n        home.appendChild(name);\r\n        // Location\r\n        home.appendChild(location);\r\n\r\n        // Device List\r\n        home.appendChild(deviceList);\r\n\r\n        // Device Name Input\r\n        home.appendChild(deviceNameInput);\r\n\r\n        // Device Power Input\r\n        home.appendChild(devicePowerInput);\r\n\r\n        // Device List Button On\r\n        home.appendChild(addDeviceButtonOn);\r\n\r\n\r\n        this._rootElement.innerHTML = \"\";\r\n        this._rootElement.appendChild(home);\r\n    }\r\n}"],"sourceRoot":""}